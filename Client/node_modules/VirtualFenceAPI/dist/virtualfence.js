(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.VirtualFence = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
function Feature(geometry, properties)
{
  return {
    "type"        : 'Feature',
    "geometry"    : geometry,
    "properties"  : properties || {}
  };
}

module.exports.Feature = Feature;

function Point(coordinates, properties)
{
  return Feature({
    "type"        : 'Point',
    "coordinate"  : coordinates.slice()
  }, properties);
}

module.exports.Point = Point;

function Polygon(coordinates, properties)
{
  return Feature({
    "type"        : 'Polygon',
    "coordinate"  : coordinates
  }, properties);
}

module.exports.Polygon = Polygon;

function FeatureCollection(features)
{
  return {
    "type"      : 'FeatureCollection',
    "features"  : features
  };
}

module.exports.FeatureCollection = FeatureCollection;

},{}],2:[function(require,module,exports){
const UNITS = {
  "degrees" : 57.2957795,
  "radians" : 1,
  "m"       : 6373000,
  "km"      : 6373
};

function RadiansToDistance(radians, unit)
{
  return radians * UNITS[unit || 'm'];
}

module.exports.RadiansToDistance = RadiansToDistance;

function DistanceToRadians(distance, unit)
{
  return distance / UNITS[unit || 'm'];
}

module.exports.DistanceToRadians = DistanceToRadians;

function DistanceToDegrees(distance, unit)
{
  return (distance / UNITS[unit || 'm']) * UNITS.degrees;
}

module.export.DistanceToDegrees = DistanceToDegrees;

function GetCoordinates(geojson)
{
  if (Array.isArray(geojson) && typeof geojson[0] === 'number' && typeof  geojson[1] === 'number')
  {
    return geojson;
  }
  else if (geojson)
  {
    switch (geojson.type)
    {
      case 'Feature':
        if (geojson.geometry && geojson.geometry.type === 'Point' && Array.isArray(geojson.geometry.coordinates))
        {
          return geojson.geometry.coordinates;
        }

        break;

      case 'Point':
        if (Array.isArray(geojson.coordinates))
        {
          return geojson.coordinates;
        }

        break;

      default:
        throw new Error('Invaild input format');
    }
  }
}

module.exports.GetCoordinates = GetCoordinates;

},{}],3:[function(require,module,exports){
const GetCoordinates = require('../VirtualFence-Helper').GetCoordinates;

function Inside(point, polygon)
{
  let points    = GetCoordinates(point),
      polygons  = polygon.geometry.coordinates;

  if (polygon.geometry.type === 'Polygon')
  {
    polygons = [polygons];
  }

  let isInside  = false,
      i         = 0;
  while (i < polygons.length && !isInside)
  {
    if (inCircuit(points, coordinates[i][0]))
    {
      let isInHole = false;
      let j = 1;

      while (j < coordinates[i].length && !isInHole)
      {
        if (inCircuit(point, coordinates[i][j]))
        {
          isInHole = true;
        }

        ++j;
      }

      if (!isInHole)
      {
        isInside = true;
      }
    }

    ++i;
  }

  return isInside;
}

module.exports.Inside = Inside;

function inCircuit(point, circuit)
{
  var isInside = false;

  for (let i = 0, j = circuit.length - 1; i < circuit.length ;  j = i++)
  {
    let x1 = circuit[i][0],
        y1 = circuit[i][1];

    let x2 = circuit[j][0],
        y2 = circuit[j][1];

    let isIntersect = ((y1 > point[1]) !== (y2 > point[1])) && (point[0] < (x2 - x1) * (point[1] - y1) / (y2 -  y1) + x1);

    isInside = (isIntersect) ? !isInside : isInside;
  }

  return isInside;
}

},{"../VirtualFence-Helper":2}],4:[function(require,module,exports){
module.exports = {
  "Inside" : require('../VirtualFence-Inside'),
  "Helper" : require('../VirtualFence-Helper')
};

let Collection = require('../VirtualFence-Collection');
module.export.Point = Collection.Point;
module.export.Polygon = Collection.Polygon;
module.exports.FeatureCollection = Collection.FeatureCollection;

},{"../VirtualFence-Collection":1,"../VirtualFence-Helper":2,"../VirtualFence-Inside":3}]},{},[4])(4)
});